/**************************************************************************************************
* FILE NAME: MainPresenter.cpp                                                                    *
*                                                                                                 *
* PURPOSE:   Provide Function to manipulate the data stored in Model                              *
*                                                                                                 *
* FILE REFERENCES:                                                                                *
*                                                                                                 *
* Name I/O Description                                                                            *
* ---- --- -----------                                                                            *
*                                                                                                 *
* EXTERNAL VARIABLES:                                                                             *
* Source: < >                                                                                     *
*                                                                                                 *
* Name Type I/O Description                                                                       *
* ---- ---- --- -----------                                                                       *
*                                                                                                 *
* EXTERNAL REFERENCES:                                                                            *
*                                                                                                 *
* Name Description                                                                                *
* ---- -----------                                                                                *
*                                                                                                 *
* ABNORMAL TERMINATION CONDITIONS, ERROR AND WARNING MESSAGES:                                    *
*                                                                                                 *
* ASSUMPTIONS, CONSTRAINTS, RESTRICTIONS:                                                         *
*                                                                                                 *
* NOTES:                                                                                          *
*                                                                                                 *
* REQUIREMENTS/FUNCTIONAL SPECIFICATIONS REFERENCES:                                              *
*                                                                                                 *
* DEVELOPMENT HISTORY:                                                                            *
*                                                                                                 *
* Date          Author       Change Id   Release   Description Of Change                          *
* ----          ------       ---------   -------   ---------------------                          *
* 30.06.2016    Hai Nguyen          01       2.0   Original                                       *
*                                                                                                 *
***************************************************************************************************/
#include <gui/main_screen/MainPresenter.hpp>
#include <gui/main_screen/MainView.hpp>
#include <gui/model/Model.hpp>
#include <gui\common\main_header.h>
#include <gui/common/FrontendApplication.hpp>

uint16_t dummy[1000] = { 4095,4095,4095,4095,4095,4095,4095,4095,4095,4095,0,0,0,0,0,0,0,0,0,0,
						 4095,4095,4095,4095,4095,4095,4095,4095,4095,4095,0,0,0,0,0,0,0,0,0,0,
						 4095,4095,4095,4095,4095,4095,4095,4095,4095,4095,0,0,0,0,0,0,0,0,0,0,
						 4095,4095,4095,4095,4095,4095,4095,4095,4095,4095,0,0,0,0,0,0,0,0,0,0,
						 4095,4095,4095,4095,4095,4095,4095,4095,4095,4095,0,0,0,0,0,0,0,0,0,0,
						 4095,4095,4095,4095,4095,4095,4095,4095,4095,4095,0,0,0,0,0,0,0,0,0,0,
						 4095,4095,4095,4095,4095,4095,4095,4095,4095,4095,0,0,0,0,0,0,0,0,0,0,
						 4095,4095,4095,4095,4095,4095,4095,4095,4095,4095,0,0,0,0,0,0,0,0,0,0,
						 4095,4095,4095,4095,4095,4095,4095,4095,4095,4095,0,0,0,0,0,0,0,0,0,0,
						 4095,4095,4095,4095,4095,4095,4095,4095,4095,4095,0,0,0,0,0,0,0,0,0,0,
						 4095,4095,4095,4095,4095,4095,4095,4095,4095,4095,0,0,0,0,0,0,0,0,0,0,
						 4095,4095,4095,4095,4095,4095,4095,4095,4095,4095,0,0,0,0,0,0,0,0,0,0,
						 4095,4095,4095,4095,4095,4095,4095,4095,4095,4095,0,0,0,0,0,0,0,0,0,0,
						 4095,4095,4095,4095,4095,4095,4095,4095,4095,4095,0,0,0,0,0,0,0,0,0,0,
						 4095,4095,4095,4095,4095,4095,4095,4095,4095,4095,0,0,0,0,0,0,0,0,0,0,
						 4095,4095,4095,4095,4095,4095,4095,4095,4095,4095,0,0,0,0,0,0,0,0,0,0,
						 4095,4095,4095,4095,4095,4095,4095,4095,4095,4095,0,0,0,0,0,0,0,0,0,0,
						 4095,4095,4095,4095,4095,4095,4095,4095,4095,4095,0,0,0,0,0,0,0,0,0,0,
						 4095,4095,4095,4095,4095,4095,4095,4095,4095,4095,0,0,0,0,0,0,0,0,0,0,
						 4095,4095,4095,4095,4095,4095,4095,4095,4095,4095,0,0,0,0,0,0,0,0,0,0,
						 4095,4095,4095,4095,4095,4095,4095,4095,4095,4095,0,0,0,0,0,0,0,0,0,0,
						 4095,4095,4095,4095,4095,4095,4095,4095,4095,4095,0,0,0,0,0,0,0,0,0,0,
						 4095,4095,4095,4095,4095,4095,4095,4095,4095,4095,0,0,0,0,0,0,0,0,0,0,
						 4095,4095,4095,4095,4095,4095,4095,4095,4095,4095,0,0,0,0,0,0,0,0,0,0,
						 4095,4095,4095,4095,4095,4095,4095,4095,4095,4095,0,0,0,0,0,0,0,0,0,0,
						 4095,4095,4095,4095,4095,4095,4095,4095,4095,4095,0,0,0,0,0,0,0,0,0,0,
						 4095,4095,4095,4095,4095,4095,4095,4095,4095,4095,0,0,0,0,0,0,0,0,0,0,
						 4095,4095,4095,4095,4095,4095,4095,4095,4095,4095,0,0,0,0,0,0,0,0,0,0,
						 4095,4095,4095,4095,4095,4095,4095,4095,4095,4095,0,0,0,0,0,0,0,0,0,0,
						 4095,4095,4095,4095,4095,4095,4095,4095,4095,4095,0,0,0,0,0,0,0,0,0,0,
						 4095,4095,4095,4095,4095,4095,4095,4095,4095,4095,0,0,0,0,0,0,0,0,0,0,
						 4095,4095,4095,4095,4095,4095,4095,4095,4095,4095,0,0,0,0,0,0,0,0,0,0,
						 4095,4095,4095,4095,4095,4095,4095,4095,4095,4095,0,0,0,0,0,0,0,0,0,0,
						 4095,4095,4095,4095,4095,4095,4095,4095,4095,4095,0,0,0,0,0,0,0,0,0,0,
						 4095,4095,4095,4095,4095,4095,4095,4095,4095,4095,0,0,0,0,0,0,0,0,0,0,
						 4095,4095,4095,4095,4095,4095,4095,4095,4095,4095,0,0,0,0,0,0,0,0,0,0,
						 4095,4095,4095,4095,4095,4095,4095,4095,4095,4095,0,0,0,0,0,0,0,0,0,0,
						 4095,4095,4095,4095,4095,4095,4095,4095,4095,4095,0,0,0,0,0,0,0,0,0,0,
						 4095,4095,4095,4095,4095,4095,4095,4095,4095,4095,0,0,0,0,0,0,0,0,0,0,
						 4095,4095,4095,4095,4095,4095,4095,4095,4095,4095,0,0,0,0,0,0,0,0,0,0,
						 4095,4095,4095,4095,4095,4095,4095,4095,4095,4095,0,0,0,0,0,0,0,0,0,0,
						 4095,4095,4095,4095,4095,4095,4095,4095,4095,4095,0,0,0,0,0,0,0,0,0,0,
						 4095,4095,4095,4095,4095,4095,4095,4095,4095,4095,0,0,0,0,0,0,0,0,0,0,
						 4095,4095,4095,4095,4095,4095,4095,4095,4095,4095,0,0,0,0,0,0,0,0,0,0,
						 4095,4095,4095,4095,4095,4095,4095,4095,4095,4095,0,0,0,0,0,0,0,0,0,0,
						 4095,4095,4095,4095,4095,4095,4095,4095,4095,4095,0,0,0,0,0,0,0,0,0,0,
						 4095,4095,4095,4095,4095,4095,4095,4095,4095,4095,0,0,0,0,0,0,0,0,0,0,
						 4095,4095,4095,4095,4095,4095,4095,4095,4095,4095,0,0,0,0,0,0,0,0,0,0,
						 4095,4095,4095,4095,4095,4095,4095,4095,4095,4095,0,0,0,0,0,0,0,0,0,0,
						 4095,4095,4095,4095,4095,4095,4095,4095,4095,4095,0,0,0,0,0,0,0,0,0,0 };

uint16_t dummy1[1000] = {	2048, 2177, 2305, 2432, 2557, 2681, 2802, 2920, 3035, 3145,
							3252, 3353, 3450, 3541, 3626, 3705, 3777, 3843, 3901, 3952,
							3996, 4032, 4060, 4080, 4092, 4096, 4092, 4080, 4060, 4032,
							3996, 3952, 3901, 3843, 3777, 3705, 3626, 3541, 3450, 3353,
							3252, 3145, 3035, 2920, 2802, 2681, 2557, 2432, 2305, 2177,
							2048, 1919, 1791, 1664, 1539, 1415, 1294, 1176, 1061, 951,
							844, 743, 646, 555, 470, 391, 319, 253, 195, 144,
							100, 64, 36, 16, 4, 0, 4, 16, 36, 64,
							100, 144, 195, 253, 319, 391, 470, 555, 646, 743,
							844, 951, 1061, 1176, 1294, 1415, 1539, 1664, 1791, 1919,
							2048, 2177, 2305, 2432, 2557, 2681, 2802, 2920, 3035, 3145,
							3252, 3353, 3450, 3541, 3626, 3705, 3777, 3843, 3901, 3952,
							3996, 4032, 4060, 4080, 4092, 4096, 4092, 4080, 4060, 4032,
							3996, 3952, 3901, 3843, 3777, 3705, 3626, 3541, 3450, 3353,
							3252, 3145, 3035, 2920, 2802, 2681, 2557, 2432, 2305, 2177,
							2048, 1919, 1791, 1664, 1539, 1415, 1294, 1176, 1061, 951,
							844, 743, 646, 555, 470, 391, 319, 253, 195, 144,
							100, 64, 36, 16, 4, 0, 4, 16, 36, 64,
							100, 144, 195, 253, 319, 391, 470, 555, 646, 743,
							844, 951, 1061, 1176, 1294, 1415, 1539, 1664, 1791, 1919,
							2048, 2177, 2305, 2432, 2557, 2681, 2802, 2920, 3035, 3145,
							3252, 3353, 3450, 3541, 3626, 3705, 3777, 3843, 3901, 3952,
							3996, 4032, 4060, 4080, 4092, 4096, 4092, 4080, 4060, 4032,
							3996, 3952, 3901, 3843, 3777, 3705, 3626, 3541, 3450, 3353,
							3252, 3145, 3035, 2920, 2802, 2681, 2557, 2432, 2305, 2177,
							2048, 1919, 1791, 1664, 1539, 1415, 1294, 1176, 1061, 951,
							844, 743, 646, 555, 470, 391, 319, 253, 195, 144,
							100, 64, 36, 16, 4, 0, 4, 16, 36, 64,
							100, 144, 195, 253, 319, 391, 470, 555, 646, 743,
							844, 951, 1061, 1176, 1294, 1415, 1539, 1664, 1791, 1919,
							2048, 2177, 2305, 2432, 2557, 2681, 2802, 2920, 3035, 3145,
							3252, 3353, 3450, 3541, 3626, 3705, 3777, 3843, 3901, 3952,
							3996, 4032, 4060, 4080, 4092, 4096, 4092, 4080, 4060, 4032,
							3996, 3952, 3901, 3843, 3777, 3705, 3626, 3541, 3450, 3353,
							3252, 3145, 3035, 2920, 2802, 2681, 2557, 2432, 2305, 2177,
							2048, 1919, 1791, 1664, 1539, 1415, 1294, 1176, 1061, 951,
							844, 743, 646, 555, 470, 391, 319, 253, 195, 144,
							100, 64, 36, 16, 4, 0, 4, 16, 36, 64,
							100, 144, 195, 253, 319, 391, 470, 555, 646, 743,
							844, 951, 1061, 1176, 1294, 1415, 1539, 1664, 1791, 1919,
							2048, 2177, 2305, 2432, 2557, 2681, 2802, 2920, 3035, 3145,
							3252, 3353, 3450, 3541, 3626, 3705, 3777, 3843, 3901, 3952,
							3996, 4032, 4060, 4080, 4092, 4096, 4092, 4080, 4060, 4032,
							3996, 3952, 3901, 3843, 3777, 3705, 3626, 3541, 3450, 3353,
							3252, 3145, 3035, 2920, 2802, 2681, 2557, 2432, 2305, 2177,
							2048, 1919, 1791, 1664, 1539, 1415, 1294, 1176, 1061, 951,
							844, 743, 646, 555, 470, 391, 319, 253, 195, 144,
							100, 64, 36, 16, 4, 0, 4, 16, 36, 64,
							100, 144, 195, 253, 319, 391, 470, 555, 646, 743,
							844, 951, 1061, 1176, 1294, 1415, 1539, 1664, 1791, 1919,
							2048, 2177, 2305, 2432, 2557, 2681, 2802, 2920, 3035, 3145,
							3252, 3353, 3450, 3541, 3626, 3705, 3777, 3843, 3901, 3952,
							3996, 4032, 4060, 4080, 4092, 4096, 4092, 4080, 4060, 4032,
							3996, 3952, 3901, 3843, 3777, 3705, 3626, 3541, 3450, 3353,
							3252, 3145, 3035, 2920, 2802, 2681, 2557, 2432, 2305, 2177,
							2048, 1919, 1791, 1664, 1539, 1415, 1294, 1176, 1061, 951,
							844, 743, 646, 555, 470, 391, 319, 253, 195, 144,
							100, 64, 36, 16, 4, 0, 4, 16, 36, 64,
							100, 144, 195, 253, 319, 391, 470, 555, 646, 743,
							844, 951, 1061, 1176, 1294, 1415, 1539, 1664, 1791, 1919,
							2048, 2177, 2305, 2432, 2557, 2681, 2802, 2920, 3035, 3145,
							3252, 3353, 3450, 3541, 3626, 3705, 3777, 3843, 3901, 3952,
							3996, 4032, 4060, 4080, 4092, 4096, 4092, 4080, 4060, 4032,
							3996, 3952, 3901, 3843, 3777, 3705, 3626, 3541, 3450, 3353,
							3252, 3145, 3035, 2920, 2802, 2681, 2557, 2432, 2305, 2177,
							2048, 1919, 1791, 1664, 1539, 1415, 1294, 1176, 1061, 951,
							844, 743, 646, 555, 470, 391, 319, 253, 195, 144,
							100, 64, 36, 16, 4, 0, 4, 16, 36, 64,
							100, 144, 195, 253, 319, 391, 470, 555, 646, 743,
							844, 951, 1061, 1176, 1294, 1415, 1539, 1664, 1791, 1919,
							2048, 2177, 2305, 2432, 2557, 2681, 2802, 2920, 3035, 3145,
							3252, 3353, 3450, 3541, 3626, 3705, 3777, 3843, 3901, 3952,
							3996, 4032, 4060, 4080, 4092, 4096, 4092, 4080, 4060, 4032,
							3996, 3952, 3901, 3843, 3777, 3705, 3626, 3541, 3450, 3353,
							3252, 3145, 3035, 2920, 2802, 2681, 2557, 2432, 2305, 2177,
							2048, 1919, 1791, 1664, 1539, 1415, 1294, 1176, 1061, 951,
							844, 743, 646, 555, 470, 391, 319, 253, 195, 144,
							100, 64, 36, 16, 4, 0, 4, 16, 36, 64,
							100, 144, 195, 253, 319, 391, 470, 555, 646, 743,
							844, 951, 1061, 1176, 1294, 1415, 1539, 1664, 1791, 1919,
							2048, 2177, 2305, 2432, 2557, 2681, 2802, 2920, 3035, 3145,
							3252, 3353, 3450, 3541, 3626, 3705, 3777, 3843, 3901, 3952,
							3996, 4032, 4060, 4080, 4092, 4096, 4092, 4080, 4060, 4032,
							3996, 3952, 3901, 3843, 3777, 3705, 3626, 3541, 3450, 3353,
							3252, 3145, 3035, 2920, 2802, 2681, 2557, 2432, 2305, 2177,
							2048, 1919, 1791, 1664, 1539, 1415, 1294, 1176, 1061, 951,
							844, 743, 646, 555, 470, 391, 319, 253, 195, 144,
							100, 64, 36, 16, 4, 0, 4, 16, 36, 64,
							100, 144, 195, 253, 319, 391, 470, 555, 646, 743,
							844, 951, 1061, 1176, 1294, 1415, 1539, 1664, 1791, 1919,
							2048, 2177, 2305, 2432, 2557, 2681, 2802, 2920, 3035, 3145,
							3252, 3353, 3450, 3541, 3626, 3705, 3777, 3843, 3901, 3952,
							3996, 4032, 4060, 4080, 4092, 4096, 4092, 4080, 4060, 4032,
							3996, 3952, 3901, 3843, 3777, 3705, 3626, 3541, 3450, 3353,
							3252, 3145, 3035, 2920, 2802, 2681, 2557, 2432, 2305, 2177,
							2048, 1919, 1791, 1664, 1539, 1415, 1294, 1176, 1061, 951,
							844, 743, 646, 555, 470, 391, 319, 253, 195, 144,
							100, 64, 36, 16, 4, 0, 4, 16, 36, 64,
							100, 144, 195, 253, 319, 391, 470, 555, 646, 743,
							844, 951, 1061, 1176, 1294, 1415, 1539, 1664, 1791, 1919};

/***************************************************************************************************
*                                                                                                  *
* FUNCTION NAME:  MainPresenter                                                                    *
*                                                                                                  *
* ARGUMENTS:                                                                                       *
*                                                                                                  *
* ARGUMENT TYPE I/O DESCRIPTION                                                                    *
* -------- ---- --- -----------                                                                    *
*                                                                                                  *
* RETURNS:                                                                                         *
*                                                                                                  *
***************************************************************************************************/
MainPresenter::MainPresenter(MainView& v)
    : view(v)
{
	
}

/***************************************************************************************************
*                                                                                                  *
* FUNCTION NAME:  activate                                                                         *
*                                                                                                  *
* ARGUMENTS:                                                                                       *
*                                                                                                  *
* ARGUMENT TYPE I/O DESCRIPTION                                                                    *
* -------- ---- --- -----------                                                                    *
*                                                                                                  *
* RETURNS:                                                                                         *
*                                                                                                  *
***************************************************************************************************/
void MainPresenter::activate()
{
    // Set initial value on main screen
}

/***************************************************************************************************
*                                                                                                  *
* FUNCTION NAME:  deactivate                                                                       *
*                                                                                                  *
* ARGUMENTS:                                                                                       *
*                                                                                                  *
* ARGUMENT TYPE I/O DESCRIPTION                                                                    *
* -------- ---- --- -----------                                                                    *
*                                                                                                  *
* RETURNS:                                                                                         *
*                                                                                                  *
***************************************************************************************************/
void MainPresenter::deactivate()
{

}

void MainPresenter::p_SetRawData(int channel)
{
	if(channel == CHANNEL_1)
	{
		#ifndef SIMULATOR
			model->SetRawData(channel, PushDaTaToModel_1());
		#else
			model->SetRawData(channel, dummy1);
		#endif // !1		
	}
	else
	{
		#ifndef SIMULATOR
			model->SetRawData(channel, PushDaTaToModel_2());
		#else
			model->SetRawData(channel, dummy1);
		#endif // !1
	}
	model->ConvertToTriggerData(channel);
}

int * MainPresenter::p_GetTriggerData(int channel)
{
	return model->GetTriggerData(channel);
}

void MainPresenter::p_SetTriggerData(int channel, int value)
{
	model->SetTriggerValue(channel, value);
}

void MainPresenter::p_SetYOffset(int channel, int value)
{
	model->SetYOffset(channel, value);
}

int MainPresenter::p_GetYOffset(int channel)
{
	return model->GetYOffset(channel);
}

int MainPresenter::p_GetTriggerValue(int channel)
{
	return model->GetTriggerValue(channel);
}

void MainPresenter::p_SetTriggerValue(int channel, int value)
{
	model->SetTriggerValue(channel, value);
}

bool MainPresenter::p_GetTrigger(int channel)
{
	return model->GetTrigger(channel) ;
}

void MainPresenter::p_SetTrigger(int channel, bool value)
{
	model->SetTrigger(channel, value);
}

bool MainPresenter::p_GetTriggerType(int channel)
{
	return model->GetTriggerType(channel);
}

void MainPresenter::p_SetTriggerType(int channel, bool value)
{
	model->SetTriggerType(channel, value);
}

int MainPresenter::p_GetTimeScale(int channel)
{
	
	
	if (channel == CHANNEL_1)
	{
		#ifndef SIMULATOR
			GetDataFromModel_1(model->GetTimeScale(channel));
		#endif // !1
	}
	else
	{
		#ifndef  SIMULATOR
			GetDataFromModel_2(model->GetTimeScale(channel));
		#endif // ! SIMULATOR		
	}

	
	return model->GetTimeScale(channel);
	
}

void MainPresenter::p_SetTimeScale(int channel, int value)
{
	model->SetTimeScale(channel, value);
}

int MainPresenter::p_GetVoltageScale(int channel)
{
	return model->GetVoltageScale(channel);
}

void MainPresenter::p_SetVoltageScale(int channel, int value)
{
	model->SetVoltageScale(channel, value);
}

float MainPresenter::p_GetTimeOffset(int channel)
{
	return model->GetTimeOffset(channel);
}

int MainPresenter::p_GetVoltOffset(int channel)
{
	return  model->GetVoltageOffset(channel);
}

float MainPresenter::p_VoltagePerPixel(int channel)
{
	float temp_value = 0;
	switch (model->GetVoltageScale(channel))
	{
		//div 2V
		case 7:
			temp_value = 52.63f;
			break;
		//div 1V
		case 6:
			temp_value = 26.32f;
			break;
		//div 500mV
		case 5:
			temp_value = 13.16f;
			break;
		//div 200mV
		case 4:
			temp_value = 5.26f;
			break;
		//div 100mV
		case 3:
			temp_value = 2.63f;
			break;
		//div 50mV
		case 2:
			temp_value = 1.32f;
			break;
		//div 20mV
		case 1:
			temp_value = 0.53f;
			break;
		//div 10mV
		case 0:
			temp_value = 0.26f;
			break;
	}
	return temp_value;
}

void MainPresenter::p_SetXOffset(int channel, int value)
{
	model->SetXOffset(channel, value);
}

int MainPresenter::p_GetXOffset(int channel)
{
	return model->GetXOffset(channel);
}


