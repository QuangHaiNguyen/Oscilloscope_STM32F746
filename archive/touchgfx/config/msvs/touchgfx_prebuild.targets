<?xml version="1.0" encoding="utf-8"?>
<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <!-- TouchGFX environment -->
  <Target Name="CheckTouchGFXEnvInstalled">
    <Error Text="Please install the TouchGFX environment" Condition="!Exists('C:\touchgfx-env')" />
  </Target>  
  <!-- .bmp and .png files in assets\images -->
  <ItemGroup>
    <ImageAssets Include="$(ApplicationRoot)\assets\images\**\*.bmp"/>
    <ImageAssets Include="$(ApplicationRoot)\assets\images\**\*.png"/>
  </ItemGroup>
  <!-- .ttf/.otf/.bdf files in assets\fonts -->
  <ItemGroup>
    <FontsAssets Include="$(ApplicationRoot)\assets\fonts\*.ttf"/>
    <FontsAssets Include="$(ApplicationRoot)\assets\fonts\*.otf"/>
    <FontsAssets Include="$(ApplicationRoot)\assets\fonts\*.bdf"/>
  </ItemGroup>
  <!-- Texts files in assets\texts -->
  <ItemGroup>
    <TextsAssets Include="$(ApplicationRoot)\assets\texts\texts.xlsx"/>
  </ItemGroup>
  <!-- Asset files in assets\fonts and assets\texts -->
  <ItemGroup>
    <FontsAndTextsAssets Include="@(FontsAssets);@(TextsAssets)"/>
  </ItemGroup>
  <!-- .cpp files in generated\images\ -->
  <ItemGroup>
    <ImagesCompileFiles Include="$(ApplicationRoot)\generated\images\**\*.cpp"/>
  </ItemGroup>
  <!-- .cpp files in generated\fonts -->
  <ItemGroup>
    <FontsCompileFiles Include="$(ApplicationRoot)\generated\fonts\**\*.cpp"/>
  </ItemGroup>
  <!-- .cpp files in generated\texts -->
  <ItemGroup>
    <TextsCompileFiles Include="$(ApplicationRoot)\generated\texts\**\*.cpp"/>
  </ItemGroup>
  <!-- .cpp files in generated\fonts and generated\texts -->
  <ItemGroup>
    <AllGeneratedFontsAndTextsFiles Include="$(ApplicationRoot)\generated\fonts\**\*.*;$(ApplicationRoot)\generated\texts\**\*.*"/>
  </ItemGroup>
  <!-- .All generated files in generated\-->
  <ItemGroup>
    <AllGeneratedFiles Include="$(ApplicationRoot)\generated\**\*.*"
		       Exclude="$(ApplicationRoot)\generated\gui_generated\**\*.*"/>
  </ItemGroup>

  <PropertyGroup>
    <UseBPPOption>/DUSE_BPP=$(UseBPP)</UseBPPOption>
  </PropertyGroup>
  
  <!-- Rotate90 option -->
  <PropertyGroup Condition="'$(RotateImage90)'=='true'">
    <RotateOption>-rotate90</RotateOption>
  </PropertyGroup>
  <PropertyGroup Condition="'$(RotateImage90)'!='true'">
    <RotateOption></RotateOption>
  </PropertyGroup>

  <!-- DitherAlgorithm, default is "2" -->
  <PropertyGroup Condition="'$(DitherAlgorithm)'!=''">
    <DitherAlgorithmOption>$(DitherAlgorithm)</DitherAlgorithmOption>
  </PropertyGroup>
  <PropertyGroup Condition="'$(DitherAlgorithm)'==''">
    <DitherAlgorithmOption>2</DitherAlgorithmOption>
  </PropertyGroup>

  <!-- Should alpha channel be dithered? -->
  <PropertyGroup Condition="'$(AlphaDitherImage)'=='yes'">
    <AlphaDitherOption>yes</AlphaDitherOption>
  </PropertyGroup>
  <PropertyGroup Condition="'$(AlphaDitherImage)'!='yes'">
    <AlphaDitherOption>no</AlphaDitherOption>
  </PropertyGroup>

  <!-- opaque image output format -->
  <PropertyGroup>
    <OpaqueImageOutputOption>$(OpaqueImageOutputFormat)</OpaqueImageOutputOption>
  </PropertyGroup>

  <!-- non opaque image output format -->
  <PropertyGroup>
    <NonOpaqueImageOutputOption>$(NonOpaqueImageOutputFormat)</NonOpaqueImageOutputOption>
  </PropertyGroup>
  
  <!-- Remap identical texts -->
  <PropertyGroup Condition="'$(RemapIdenticalTexts)'=='yes'">
    <RemapIdenticalTexts>yes</RemapIdenticalTexts>
  </PropertyGroup>
  <PropertyGroup Condition="'$(RemapIdenticalTexts)'!='yes'">
    <RemapIdenticalTexts>no</RemapIdenticalTexts>
  </PropertyGroup>
  
  <!-- Text Data format option -->
  <PropertyGroup Condition="'$(TextDataFormat)'=='A4'">
    <TextDataFormat>A4</TextDataFormat>
  </PropertyGroup>
  <PropertyGroup Condition="'$(TextDataFormat)'!='A4'">
    <TextDataFormat></TextDataFormat>
  </PropertyGroup>
  
  <!-- Prepare generation of BitmapDatabase files -->
  <Target Name="PrepareBitmapDatabaseFiles">
    <Message Text="Prepare generation of BitmapDatabase files"/>
    <Exec Command="echo Prepare generation of BitmapDatabase files"/>
    <!-- Create root directory for generated image files -->
    <MakeDir Directories="$(ApplicationRoot)\generated\images\include"/>
    <MakeDir Directories="$(ApplicationRoot)\generated\images\src"/>
    <!-- Delete existing text file listing all image files -->
    <Delete Files="$(ApplicationRoot)\generated\images\image_files.txt"/>
  </Target>

  <!-- Generate BitmapDatabase files using ImageConvert -->
  <Target Name="GenerateBitmapDatabaseFiles">
    <Message Text="Using ImageConvert to generate BitmapDatabase files: @(ImageAssets)"/>
    <Exec Command="echo Using ImageConvert to generate BitmapDatabase files: @(ImageAssets)"/>
    <!-- Run ImageConvert to generate BitMapDatabase.hpp/.cpp files -->
    <Exec Command="&quot;$(TouchGFXReleasePath)\framework\tools\imageconvert\build\msvs\ImageConvert.exe&quot; -header -dither $(DitherAlgorithmOption) -alpha_dither $(AlphaDitherOption) -non_opaque_image_format $(NonOpaqueImageOutputOption) -opaque_image_format $(OpaqueImageOutputOption) -f $(ApplicationRoot)\generated\images\image_files.txt"/>
    <!-- Move BitmapDatabase files to appropriate locations -->
    <Move SourceFiles="BitmapDatabase.hpp" DestinationFolder="$(ApplicationRoot)\generated\images\include"/>
    <Move SourceFiles="BitmapDatabase.cpp" DestinationFolder="$(ApplicationRoot)\generated\images\src"/>
    <!-- Delete text file listing all image files -->
    <Delete Files="$(ApplicationRoot)\generated\images\image_files.txt"/>
  </Target>

  <!-- Handle generation of BitmapDatabase files when no images exist-->
  <Target Name="GenerateBitmapDatabaseFilesNoImages"
          Condition="'@(ImageAssets)'==''"
          BeforeTargets="ClCompile"
          >
    <CallTarget Targets="CheckTouchGFXEnvInstalled" />
    <Message Text="Using imageconvert to generate BitmapDatabase files with no image files"/>
    <Exec Command="echo Using imageconvert to generate BitmapDatabase files with no image files"/>
    <!-- Call target for preparing genration of BitmapDatabaseFiles -->
    <CallTarget Targets="PrepareBitmapDatabaseFiles" />
    <!-- Create empty text file with no image files -->
    <Touch Files="$(ApplicationRoot)\generated\images\image_files.txt" AlwaysCreate="true" />
    <!-- Call target for generating BitmapDatabaseFiles -->
    <CallTarget Targets="GenerateBitmapDatabaseFiles" />
  </Target>

  <!-- Handle generation of BitmapDatabase files with found images -->
  <Target Name="GenerateBitmapDatabaseFilesChanges"
          Inputs="@(ImageAssets->'$(ApplicationRoot)\generated\images\src\%(RecursiveDir)%(Filename).cpp')"
          Outputs="$(ApplicationRoot)\generated\images\include\BitmapDatabase.hpp;$(ApplicationRoot)\generated\images\src\BitmapDatabase.cpp"
          BeforeTargets="ClCompile"
	  DependsOnTargets="GenerateImageAssets"
          >
    <CallTarget Targets="CheckTouchGFXEnvInstalled" />
    <Message Text="Using imageconvert to generate BitmapDatabase files: @(ImageAssets)"/>
    <!-- Call target for preparing generation of BitmapDatabaseFiles -->
    <CallTarget Targets="PrepareBitmapDatabaseFiles" />
    <!-- Create text file listing all image files -->
    <WriteLinesToFile File="$(ApplicationRoot)\generated\images\image_files.txt" Lines="@(ImageAssets)" Overwrite="true" />
    <!-- Call target for generating BitmapDatabaseFiles -->
    <CallTarget Targets="GenerateBitmapDatabaseFiles" />
  </Target>

  <!-- Handle image files in assets\images -->
  <Target Name="GenerateImageAssets"
          BeforeTargets="ClCompile"
          Inputs="@(ImageAssets)"
          Outputs="@(ImageAssets->'$(ApplicationRoot)\generated\images\src\%(RecursiveDir)%(Filename).cpp')"
          >
    <CallTarget Targets="CheckTouchGFXEnvInstalled" />
    <Message Text="Using imageconvert to generate files for: %(ImageAssets.Identity) - $(ApplicationRoot)\generated\images\src\%(ImageAssets.RecursiveDir)%(ImageAssets.Filename).cpp"/>
    <!--<Exec Command="echo Using imageconvert to generate files for: %(ImageAssets.Identity)"/>-->
    <MakeDir Directories="$(ApplicationRoot)\generated\images\src\%(ImageAssets.RecursiveDir)"/>
    <!-- Run imageconvert for each image -->
    <!-- Please note that the Regex expression can generate -rotate and -rotate0, both of which are ignored by ImageConvert -->
    <Exec Command="&quot;$(TouchGFXReleasePath)\framework\tools\imageconvert\build\msvs\ImageConvert.exe&quot; -dither $(DitherAlgorithmOption) -alpha_dither $(AlphaDitherOption) -non_opaque_image_format $(NonOpaqueImageOutputOption) -opaque_image_format $(OpaqueImageOutputOption) -f %(ImageAssets.FullPath) -o $(ApplicationRoot)\generated\images\src\%(ImageAssets.RecursiveDir)%(ImageAssets.Filename).cpp $(RotateOption) $([System.Text.RegularExpressions.Regex]::Replace('%(ImageAssets.Filename)','^(.*\.(0|90|180|270)|.*)$','-rotate$2'))"/>
  </Target>

  <!-- Handle texts files in assets\texts -->
  <Target Name="GenerateFontsAndTextsFiles"
          BeforeTargets="ClCompile"
          Inputs="@(TextsAssets);@(FontsAssets)"
          Outputs="@(TextsAssets->'$(ApplicationRoot)\generated\texts\src\%(Filename).cpp')"
          >
    <CallTarget Targets="CheckTouchGFXEnvInstalled" />
    <Message Text="Compiling: %(TextsAssets.Identity) using textconvert" />
    <Exec Command="echo Using textconvert for %(TextsAssets.Identity)"/>
    <!-- Delete previous generated font and text files -->
    <Delete Files="@(AllGeneratedFontsAndTextsFiles)"/>
    <!-- Generate header and source files for fonts and texts -->
    <Exec Command="C:\touchgfx-env\MinGW\msys\1.0\ruby193\bin\ruby.exe -C$(TouchGFXReleasePath)\framework\tools\textconvert main.rb %(TextsAssets.FullPath) $(TouchGFXReleasePath)\framework\tools\fontconvert\build\win\fontconvert.out $(ApplicationRoot)\generated\fonts $(ApplicationRoot)\generated\texts $(ApplicationRoot)\assets\fonts $(ApplicationRoot) $(RemapIdenticalTexts) $(TextDataFormat)"/>
  </Target>

  <!-- Compile all generated source files -->
  <Target Name="CompileAllGeneratedFiles"
          BeforeTargets="ClCompile"
          >
    <ItemGroup>
      <AllGeneratedCompileFiles Include="$(ApplicationRoot)\generated\**\*.cpp"
				Exclude="$(ApplicationRoot)\generated\gui_generated\**\*.cpp"/>
    </ItemGroup>
    <Message Text="Creating compile items for all generated source files: @(AllGeneratedCompileFiles)"/>
    <Exec Command="echo Creating compile items for all generated source files: @(AllGeneratedCompileFiles)"/>
    <!-- Create compile items for all generated .cpp files -->
    <CreateItem Include="@(AllGeneratedCompileFiles)">
      <Output TaskParameter="Include" ItemName="ClCompile"/>
    </CreateItem>
  </Target>

  <!-- Clean-up generated files -->
  <Target Name="CleanupGeneratedFiles"
          AfterTargets="Clean"
          >
    <Message Text="Clean-up generated files: @(AllGeneratedFiles)"/>
    <Exec Command="echo Clean-up generated files: @(AllGeneratedFiles)"/>

    <!-- Delete all generated files -->
    <Delete Files="@(AllGeneratedFiles)"/>
    <!--RemoveDir Directories="generated"/-->
  </Target>
</Project>
